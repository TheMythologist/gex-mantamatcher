import { app, BrowserWindow, ipcMain, net, protocol } from 'electron';
import path from 'path';
import url from 'url';

import db, { getManta, getMantas } from './db';
import { pullFromSheets, pushToSheets } from './gsheets';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

async function sync(win: BrowserWindow) {
  try {
    await pushToSheets(win, db);
    await pullFromSheets(win, db);
  } catch (e) {
    console.error('Sync failed:', e.message);
  }
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.webContents.openDevTools()

  // Sync immediately, then every 5 min
  sync(mainWindow);
  setInterval(() => sync(mainWindow), 5 * 60 * 1000);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  ipcMain.handle('online-status-changed', (event, status) => {
    if (status === 'online') sync(mainWindow);
  });

  ipcMain.handle('add-local-row', (event, rowData) => {
    const id = 'local-' + Date.now();
    const data = JSON.stringify(rowData);

    // TODO: Bogus data
    const stmt = db.prepare('INSERT INTO mantas (id, data, source) VALUES (?, ?, ?)');
    stmt.run(id, data, 'local');
  });

  ipcMain.handle('db-getManta', (event, id: string) => getManta(id));
  ipcMain.handle('db-getMantas', getMantas);

  protocol.handle('static', request => {
    const filePath = request.url.slice('static://'.length);
    return net.fetch(
      url
        .pathToFileURL(
          path.join(
            process.env.NODE_ENV === 'development' ? '' : app.getPath('userData'),
            'assets',
            filePath,
          ),
        )
        .toString(),
    );
  });

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
