import { app, ipcMain, BrowserWindow } from 'electron';
import sqlite3 from "sqlite3";
import { google } from "googleapis";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const SHEET_ID = "1yUPPdRQj_c0ugSIqowFX90mZnQN32gX7Z6y6nYIUrlY";
const RANGE = "Mantas (NLP)!A5:AT";
const SERVICE_ACCOUNT_KEY_FILE = "service-account.json";

const db = new sqlite3.Database("localdata.db");
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS rows (
    id TEXT PRIMARY KEY,
    data TEXT,
    source TEXT
  )`);
});

function getSheetsClient() {
  const auth = new google.auth.GoogleAuth({
    keyFile: SERVICE_ACCOUNT_KEY_FILE,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
  });
  return google.sheets({ version: "v4", auth });
}

async function pullFromSheets(win: BrowserWindow) {
  const sheets = getSheetsClient();
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range: RANGE,
    valueRenderOption: 'FORMULA',
  });

  const rows = res.data.values || [];
  if (rows.length === 0) return;

  rows.forEach((row, i) => {
    const id = String(i + 1); // use row number as ID
    const data = JSON.stringify(row);
    db.run(
      "INSERT OR IGNORE INTO rows (id, data, source) VALUES (?, ?, ?)",
      [id, data, "remote"]
    );
  });

  win.webContents.send("sync-status", "Pulled " + rows.length + " rows");
}

async function pushToSheets(win: BrowserWindow) {
  const sheets = getSheetsClient();

  return new Promise<void>((resolve, reject) => {
    db.all("SELECT * FROM rows WHERE source = 'local'", async (err, rows) => {
      if (err) return reject(err);
      if (rows.length === 0) return resolve();

      const values = rows.map((r) => JSON.parse(r.data));
      try {
        await sheets.spreadsheets.values.append({
          spreadsheetId: SHEET_ID,
          range: RANGE,
          valueInputOption: "RAW",
          requestBody: { values },
        });

        // mark rows as synced
        const stmt = db.prepare("UPDATE rows SET source = 'remote' WHERE id = ?");
        rows.forEach((r) => stmt.run(r.id));
        stmt.finalize();

        win.webContents.send("sync-status", "Pushed " + rows.length + " rows");
        resolve();
      } catch (e) {
        reject(e);
      }
    });
  });
}

async function sync(win: BrowserWindow) {
  try {
    await pushToSheets(win);
    await pullFromSheets(win);
  } catch (e) {
    console.error("Sync failed:", e.message);
  }
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Sync immediately, then every 5 min
  sync(mainWindow);
  setInterval(() => sync(mainWindow), 5 * 60 * 1000);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.on("online-status-changed", (event, status) => {
  if (status === "online") sync(mainWindow);
});

ipcMain.on("add-local-row", (event, rowData) => {
  const id = "local-" + Date.now();
  const data = JSON.stringify(rowData);
  db.run(
    "INSERT INTO rows (id, data, source) VALUES (?, ?, ?)",
    [id, data, "local"]
  );
});
